 material colored
{
    technique
    {
        pass
        {
            vertexShader = res/shaders/colored.vert
            fragmentShader = res/shaders/colored.frag
            defines = MODULATE_COLOR;LIGHTING;DIRECTIONAL_LIGHT_COUNT 1

            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
			
			u_lightColor = 1.0, 1.0, 1.0
			u_lightDirection = -1.0, -1.0, -1.0
            
            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}

material texturedUnlit
{
    technique
    {
        pass
        {
            vertexShader = res/shaders/textured-unlit.vert
            fragmentShader = res/shaders/textured-unlit.frag

            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            
            sampler u_diffuseTexture
            {
                mipmap = true
                wrapS = CLAMP
                wrapT = CLAMP
                minFilter = LINEAR_MIPMAP_LINEAR
                magFilter = LINEAR
            }

            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}

material coloredUnlit
{
    technique
    {
        pass
        {
            vertexShader = res/shaders/colored-unlit.vert
            fragmentShader = res/shaders/colored-unlit.frag
			defines = MODULATE_COLOR

            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            
            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}

material texturedSpecular
{
    technique
    {
        pass
        {
            vertexShader = res/shaders/textured.vert
            fragmentShader = res/shaders/textured.frag
			defines = SPECULAR;DIRECTIONAL_LIGHT_COUNT 1

            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            u_worldViewMatrix = WORLD_VIEW_MATRIX
            u_cameraPosition = CAMERA_VIEW_POSITION
            u_ambientColor = SCENE_AMBIENT_COLOR
            u_specularExponent = 50

            sampler u_diffuseTexture
            {
                mipmap = true
                wrapS = CLAMP
                wrapT = CLAMP
                minFilter = LINEAR_MIPMAP_LINEAR
                magFilter = LINEAR
            }

            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}

material texturedTransparent
{
    technique
    {
        pass
        {
            vertexShader = res/shaders/textured.vert
            fragmentShader = res/shaders/textured.frag
			
			u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            u_worldViewMatrix = WORLD_VIEW_MATRIX
            
            sampler u_diffuseTexture
            {
                mipmap = true
                wrapS = CLAMP
                wrapT = CLAMP
                minFilter = LINEAR_MIPMAP_LINEAR
                magFilter = LINEAR
            }

            renderState
            {
                cullFace = false
                depthTest = true
	            blend = true
                blendSrc = SRC_ALPHA
                blendDst = ONE_MINUS_SRC_ALPHA
            }
        }
    }
}

material texturedBumped
{
    technique
    {
        pass
        {
            // shaders
            vertexShader = res/shaders/textured-bumped.vert
            fragmentShader = res/shaders/textured-bumped.frag
			
			u_worldViewMatrix = WORLD_VIEW_MATRIX
			u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
			u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX

            // samplers
            sampler u_diffuseTexture
            {
                mipmap = true
                wrapS = REPEAT
                wrapT = REPEAT
                minFilter = NEAREST_MIPMAP_LINEAR
                magFilter = LINEAR
            }
			
			sampler u_normalmapTexture
            {
                mipmap = true
                wrapS = REPEAT
                wrapT = REPEAT
                minFilter = NEAREST_MIPMAP_LINEAR
                magFilter = LINEAR
            }

            // render state
            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}

material skinedmesh : texturedTransparent
{
    technique
    {
        pass
        {
            defines = SKINNING;SKINNING_JOINT_COUNT 31;MODULATE_ALPHA;DIRECTIONAL_LIGHT_COUNT 1
            u_matrixPalette = MATRIX_PALETTE
        }
    }
}

material skinedmeshcolored : colored
{
    technique
    {
        pass
        {
            defines = SKINNING;SKINNING_JOINT_COUNT 31;MODULATE_ALPHA;POINT_LIGHT
            u_matrixPalette = MATRIX_PALETTE
        }
    }
}

material skinedmeshbumped : texturedBumped
{
    technique
    {
        pass
        {
            defines = SKINNING;SKINNING_JOINT_COUNT 31;MODULATE_ALPHA;POINT_LIGHT
            u_matrixPalette = MATRIX_PALETTE
        }
    }
}

material skinedmeshunlit : texturedUnlit
{
    technique
    {
        pass
        {
            defines = SKINNING;BATCHING;SKINNING_JOINT_COUNT 31;MODULATE_ALPHA;DIRECTIONAL_LIGHT_COUNT 1
            u_matrixPalette = MATRIX_PALETTE
        }
    }
}